"""
    pygments.lexers.ezhil
    ~~~~~~~~~~~~~~~~~~~~~

    Pygments lexers for Ezhil language.

    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

import re

from pygments.lexer import RegexLexer, include, words
from pygments.token import Keyword, Comment, Name, String, Number, \
    Punctuation, Operator, Whitespace

__all__ = ['EzhilLexer']


class EzhilLexer(RegexLexer):
    """
    Lexer for Ezhil, a Tamil script-based programming language.
    """
    name = 'Ezhil'
    url = 'http://ezhillang.org'
    aliases = ['ezhil']
    filenames = ['*.n']
    mimetypes = ['text/x-ezhil']
    version_added = '2.1'
    # Refer to tamil.utf8.tamil_letters from open-tamil for a stricter version of this.
    # This much simpler version is close enough, and includes combining marks.
    _TALETTERS = '[a-zA-Z_]|[\u0b80-\u0bff]'
    tokens = {
        'root': [
            include('keywords'),
            (r'#.*$', Comment.Single),
            (r'[@+/*,^\-%]|[!<>=]=?|&&?|\|\|?', Operator),
            ('à®‡à®²à¯', Operator.Word),
            (words(('assert', 'max', 'min',
                    'à®¨à¯€à®³à®®à¯', 'à®šà®°à®®à¯_à®‡à®Ÿà®®à®¾à®±à¯à®±à¯', 'à®šà®°à®®à¯_à®•à®£à¯à®Ÿà¯à®ªà®¿à®Ÿà®¿',
                    'à®ªà®Ÿà¯à®Ÿà®¿à®¯à®²à¯', 'à®ªà®¿à®©à¯à®‡à®£à¯ˆ', 'à®µà®°à®¿à®šà¯ˆà®ªà¯à®ªà®Ÿà¯à®¤à¯à®¤à¯',
                    'à®Žà®Ÿà¯', 'à®¤à®²à¯ˆà®•à¯€à®´à¯', 'à®¨à¯€à®Ÿà¯à®Ÿà®¿à®•à¯à®•', 'à®¨à¯à®´à¯ˆà®•à¯à®•', 'à®µà¯ˆ',
                    'à®•à¯‡à®¾à®ªà¯à®ªà¯ˆ_à®¤à®¿à®±', 'à®•à¯‡à®¾à®ªà¯à®ªà¯ˆ_à®Žà®´à¯à®¤à¯', 'à®•à¯‡à®¾à®ªà¯à®ªà¯ˆ_à®®à¯‚à®Ÿà¯',
                    'pi', 'sin', 'cos', 'tan', 'sqrt', 'hypot', 'pow',
                    'exp', 'log', 'log10', 'exit',
                    ), suffix=r'\b'), Name.Builtin),
            (r'(True|False)\b', Keyword.Constant),
            (r'[^\S\n]+', Whitespace),
            include('identifier'),
            include('literal'),
            (r'[(){}\[\]:;.]', Punctuation),
        ],
        'keywords': [
            ('à®ªà®¤à®¿à®ªà¯à®ªà®¿|à®¤à¯‡à®°à¯à®¨à¯à®¤à¯†à®Ÿà¯|à®¤à¯‡à®°à¯à®µà¯|à®à®¤à¯‡à®©à®¿à®²à¯|à®†à®©à®¾à®²à¯|à®‡à®²à¯à®²à¯ˆà®†à®©à®¾à®²à¯|à®‡à®²à¯à®²à¯ˆ|à®†à®•|à®’à®µà¯à®µà¯Šà®©à¯à®±à®¾à®•|à®‡à®²à¯|à®µà®°à¯ˆ|à®šà¯†à®¯à¯|à®®à¯à®Ÿà®¿à®¯à¯‡à®©à®¿à®²à¯|à®ªà®¿à®©à¯à®•à¯Šà®Ÿà¯|à®®à¯à®Ÿà®¿|à®¨à®¿à®°à®²à¯à®ªà®¾à®•à®®à¯|à®¤à¯Šà®Ÿà®°à¯|à®¨à®¿à®±à¯à®¤à¯à®¤à¯|à®¨à®¿à®°à®²à¯à®ªà®¾à®•à®®à¯', Keyword),
        ],
        'identifier': [
            ('(?:'+_TALETTERS+')(?:[0-9]|'+_TALETTERS+')*', Name),
        ],
        'literal': [
            (r'".*?"', String),
            (r'\d+((\.\d*)?[eE][+-]?\d+|\.\d*)', Number.Float),
            (r'\d+', Number.Integer),
        ]
    }

    def analyse_text(text):
        """This language uses Tamil-script. We'll assume that if there's a
        decent amount of Tamil-characters, it's this language. This assumption
        is obviously horribly off if someone uses string literals in tamil
        in another language."""
        if len(re.findall(r'[\u0b80-\u0bff]', text)) > 10:
            return 0.25

    def __init__(self, **options):
        super().__init__(**options)
        self.encoding = options.get('encoding', 'utf-8')

